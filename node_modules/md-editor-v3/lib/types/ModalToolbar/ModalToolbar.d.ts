import { Themes } from '../MdEditor/type';
import { PropType, ExtractPropTypes, VNode } from 'vue';

declare const _default: import('vue').DefineComponent<{
    title: {
        type: PropType<string>;
        default: string;
    };
    modalTitle: {
        type: PropType<string>;
        default: string;
    };
    visible: {
        type: PropType<boolean>;
    };
    width: {
        type: PropType<string>;
        default: string;
    };
    height: {
        type: PropType<string>;
        default: string;
    };
    trigger: {
        type: PropType<string | VNode<import('vue').RendererNode, import('vue').RendererElement, {
            [key: string]: any;
        }>>;
    };
    onClick: {
        type: PropType<() => void>;
    };
    onClose: {
        type: PropType<() => void>;
    };
    /**
     * 显示全屏按钮
     */
    showAdjust: {
        type: PropType<boolean>;
        default: boolean;
    };
    isFullscreen: {
        type: PropType<boolean>;
        default: boolean;
    };
    onAdjust: {
        type: PropType<(val: boolean) => void>;
    };
    /**
     * ==没有意义，仅用于规避克隆组件自动嵌入insert方法时，传入的是该组件而产生的waring
     */
    insert: {
        type: PropType<() => void>;
    };
    language: {
        type: PropType<string>;
    };
    theme: {
        type: PropType<Themes>;
    };
    previewTheme: {
        type: PropType<string>;
    };
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("onClick" | "onClose" | "onAdjust")[], "onClick" | "onClose" | "onAdjust", import('vue').PublicProps, Readonly<ExtractPropTypes<{
    title: {
        type: PropType<string>;
        default: string;
    };
    modalTitle: {
        type: PropType<string>;
        default: string;
    };
    visible: {
        type: PropType<boolean>;
    };
    width: {
        type: PropType<string>;
        default: string;
    };
    height: {
        type: PropType<string>;
        default: string;
    };
    trigger: {
        type: PropType<string | VNode<import('vue').RendererNode, import('vue').RendererElement, {
            [key: string]: any;
        }>>;
    };
    onClick: {
        type: PropType<() => void>;
    };
    onClose: {
        type: PropType<() => void>;
    };
    /**
     * 显示全屏按钮
     */
    showAdjust: {
        type: PropType<boolean>;
        default: boolean;
    };
    isFullscreen: {
        type: PropType<boolean>;
        default: boolean;
    };
    onAdjust: {
        type: PropType<(val: boolean) => void>;
    };
    /**
     * ==没有意义，仅用于规避克隆组件自动嵌入insert方法时，传入的是该组件而产生的waring
     */
    insert: {
        type: PropType<() => void>;
    };
    language: {
        type: PropType<string>;
    };
    theme: {
        type: PropType<Themes>;
    };
    previewTheme: {
        type: PropType<string>;
    };
}>> & {
    onOnClose?: ((...args: any[]) => any) | undefined;
    onOnClick?: ((...args: any[]) => any) | undefined;
    onOnAdjust?: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    height: string;
    width: string;
    showAdjust: boolean;
    isFullscreen: boolean;
    modalTitle: string;
}, {}>;
export default _default;
